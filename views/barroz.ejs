<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Barroz AR</title>
    <meta charset="utf-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, user-scalable=no"
    />
    <meta
      https-equiv="Content-Security-Policy"
      content="default-src *; style-src 'self' 'unsafe-inline'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://launchar.app"
    />
    <!-- <meta
      http-equiv="Content-Security-Policy"
      content="script-src 'self' https://launchar.app;"
    /> -->
    <!-- <link
      rel="icon"
      type="image/x-icon"
      href="./assets/icons/Website_Icone.png"
    /> -->
    <link rel="stylesheet" href="./css/index.css" />

    <script src="https://launchar.app/sdk/v1?key=a5ltCh2Lg3yeoh19Ao2almo7ZYVnmTOF&redirect=true"></script>

    <script type="importmap">
      {
        "imports": {
          "three": "https://unpkg.com/three@0.161.0/build/three.module.js",
          "three/addons/": "https://unpkg.com/three@0.161.0/examples/jsm/"
        }
      }
    </script>
  </head>

  <body>
    <div class="bg"></div>

    <div class="main-container">
      <div id="header" class="header"></div>
      <div id="middle-part" class="middle-part"></div>
      <div id="footer"></div>
    </div>
    <div id="overlay">
      <!-- <div id="audio-button" class="audio-button"></div> -->
      <div id="look_for_surface_icon"></div>
      <div id="close_ar_button"></div>

      <div id="footer" class="footer footer-2">
        <div class="metavian"></div>
        <!-- <div class="bar-indicator">
          <div id="bar1" class="bar"></div>
          <div id="bar2" class="bar yellow-bar"></div>
          <div id="bar3" class="bar"></div> -->
        <!-- <div class="bar"></div>
                <div class="bar"></div> -->
        <!-- </div> -->
      </div>
    </div>
    <video
      id="front_video"
      preload="auto"
      crossOrigin="anonymous"
      playsinline
      webkit-playsinline
      style="visibility: hidden; pointer-events: none"
    >
      <source src="<%= front_video_url %>" />
    </video>
    <video
      id="rear_video"
      preload="auto"
      crossOrigin="anonymous"
      playsinline
      webkit-playsinline
      style="visibility: hidden; pointer-events: none"
    >
      <source src="<%= rear_video_url %>" />
    </video>

    <!-- <script>
      var bgAudio = document.getElementById("bgAudio");
      var audioBT = document.getElementById("audio-button");
      var audio_button_1 = document.getElementById("audio-button-1");
      const movie_title = document.getElementById("movie-title");

      bgAudio.loop = true;
      bgAudio.volume = 0.75;
      audioBT.addEventListener("click", () => {
        if (bgAudio.paused) {
          bgAudio.play();
          audioBT.style.backgroundImage =
            "url('../assets/icons/Sound_OFF.svg')";
        } else {
          bgAudio.pause();
          audioBT.style.backgroundImage = "url('../assets/icons/Sound_ON.svg')";
        }
      });
      audio_button_1.addEventListener("click", () => {
        if (bgAudio.paused) {
          bgAudio.play();
          audio_button_1.style.backgroundImage =
            "url('../assets/icons/Sound_OFF.svg')";
        } else {
          bgAudio.pause();
          audio_button_1.style.backgroundImage =
            "url('../assets/icons/Sound_ON.svg')";
        }
      });
    </script> -->

    <script id="vertexShader" type="glsl">

      varying vec2 vUv;
      void main( void ) {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);
      }
    </script>
    <script id="fragmentShader" type="glsl">

      uniform vec3 keyColor;
      uniform float similarity;
      uniform float smoothness;
      varying vec2 vUv;
      uniform sampler2D map;
      void main() {

          vec4 videoColor = texture2D(map, vUv);

          float Y1 = 0.299 * keyColor.r + 0.587 * keyColor.g + 0.114 * keyColor.b;
          float Cr1 = keyColor.r - Y1;
          float Cb1 = keyColor.b - Y1;

          float Y2 = 0.299 * videoColor.r + 0.587 * videoColor.g + 0.114 * videoColor.b;
          float Cr2 = videoColor.r - Y2;
          float Cb2 = videoColor.b - Y2;

          float blend = smoothstep(similarity, similarity + smoothness, distance(vec2(Cr2, Cb2), vec2(Cr1, Cb1)));
          gl_FragColor = vec4(videoColor.rgb, videoColor.a * blend);
      }
    </script>
    <!-- shadow -->
    <script id="vertexShader2" type="glsl">
      varying vec2 vUv;
      void main( void ) {
          vUv = uv;
          gl_Position = projectionMatrix * modelViewMatrix * vec4(position,1.0);
      }
    </script>
    <script id="fragmentShader2" type="glsl">
      uniform vec3 keyColor;
      uniform float similarity;
      uniform float smoothness;
      varying vec2 vUv;
      uniform sampler2D map;
      void main() {

          vec4 videoColor = texture2D(map, vUv);

          float Y1 = 0.299 * keyColor.r + 0.587 * keyColor.g + 0.114 * keyColor.b;
          float Cr1 = keyColor.r - Y1;
          float Cb1 = keyColor.b - Y1;

          float Y2 = 0.299 * videoColor.r + 0.587 * videoColor.g + 0.114 * videoColor.b;
          float Cr2 = videoColor.r - Y2;
          float Cb2 = videoColor.b - Y2;

          vec3 shadowColor = vec3(0.0,0.0,0.0);
          float blend = smoothstep(similarity, similarity + smoothness, distance(vec2(Cr2, Cb2), vec2(Cr1, Cb1)));
          gl_FragColor = vec4(shadowColor.rgb, videoColor.a * blend * 0.10);
      }
    </script>
    <script type="module">
      import * as THREE from "three";
      import { ARButton } from "three/addons/webxr/ARButton.js";
      //import { GLTFLoader } from "three/addons/loaders/GLTFLoader.js";
      //import { RGBELoader } from "three/addons/loaders/RGBELoader.js";

      let camera, scene, renderer;
      let controller;
      let xrReferenceSpace = null; // Store reference to XR reference space

      var isXRSessionStarted = false;
      const look_for_surface_icon = document.getElementById(
        "look_for_surface_icon"
      );
      //var SandeepAudioATimeInterval = null;

      var is_front_scene_placed = false;
      var hitSomething = false;
      var reticle = null;
      var sceneGroup = null;
      var front_scene = null;
      var rear_scene = null;
      //   var golamTitleObject = null;
      //   var dateObject = null;
      var parentObj = null;
      let frontFrame = null;
      let frontFrameShadow = null;
      let rearFrame = null;
      let rearFrameShadow = null;
      //let imageFrame1 = null;
      //let imageFrame1Shadow = null;
      //let titleMesh = null;
      let dateMesh = null;
      // let imageFrame2 = null;
      // let imageFrame3 = null;

      let video1 = document.getElementById("front_video");
      let video2 = document.getElementById("rear_video");
      // let video3 = document.getElementById("video-lang3");

      video1.addEventListener("timeupdate", (event) => {
        console.log(video1.currentTime);
        if (video1.currentTime > 17 && video2.paused) {
          video2.play();
        }
      });

      let frustum = null;
      let pointer = null;

      const textureScale = 1;

      let singleTouchTimeout = null;
      let touchStartPosX = null;
      let touchStartPosY = null;
      let multiTouch = false;
      let startingDistance = null;
      let distRatio = null;
      let frameSizeMultiplier = 1; // how much larger than the model should the frame

      //shaders
      const vertexShader = document.getElementById("vertexShader").textContent;
      const fragmentShader =
        document.getElementById("fragmentShader").textContent;
      const vertexShaderShadow =
        document.getElementById("vertexShader2").textContent;
      const fragmentShaderShadow =
        document.getElementById("fragmentShader2").textContent;

      var session = null;
      var referenceSpace = null;
      var newReferenceSpace = null;

      var timeout = null;

      var close_ar_button = document.getElementById("close_ar_button");
      close_ar_button.addEventListener("click", () => {
        location.reload();
      });

      // const SandeepAudioA = document.getElementById("SandeepAudioA");
      // SandeepAudioA.load();

      if (navigator.xr) {
        navigator.xr.isSessionSupported("immersive-ar").then((isSupported) => {
          if (isSupported == false) {
            const btn = document.getElementById("ARButton");

            btn.addEventListener("click", () => {
              window.location.href = "/qr";
            });
          }
        });
      }

      init();
      animate();

      function init() {
        const container = document.createElement("div");
        document.body.appendChild(container);

        scene = new THREE.Scene();

        camera = new THREE.PerspectiveCamera(
          70,
          window.innerWidth / window.innerHeight,
          0.01,
          20
        );

        // var hlight = new THREE.AmbientLight(0xffffff, 50);
        // scene.add(hlight);

        // const light = new THREE.HemisphereLight(0xffffff, 0xbbbbff, 30);
        // light.position.set(-5, 10, -5);
        // scene.add(light);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 20);
        directionalLight.position.set(-5, 10, -5);
        scene.add(directionalLight);

        // const pointLight = new THREE.PointLight(0xff0000, 100, 100);
        // light.position.set(0, 5, 0);
        // scene.add(light);

        // new RGBELoader().load(
        //   "../assets/images/rostock_arches_1k.hdr",
        //   function (texture) {
        //     texture.mapping = THREE.EquirectangularReflectionMapping;
        //     //var envMap = pmremGenerator.fromEquirectangular(texture).texture;
        //     //scene.background = texture;
        //     scene.enviroment = texture;
        //   }
        // );

        //

        renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.xr.enabled = true;
        container.appendChild(renderer.domElement);

        document.getElementById("middle-part").appendChild(
          ARButton.createButton(renderer, {
            //mode: "immersive-ar",
            requiredFeatures: ["local", "hit-test"],
            optionalFeatures: ["dom-overlay"],
            domOverlay: { root: document.getElementById("overlay") },
          })
        );

        controller = renderer.xr.getController(0);
        //session = renderer.xr.requestSession.requestReferenceSpace("local");
        controller.addEventListener("select", onSelect);
        // document
        //     .getElementById("container")
        //     .addEventListener("touchstart", onTouchStart, false);
        // document
        //     .getElementById("container")
        //     .addEventListener("touchmove", onTouchMove, false);
        // document
        //     .getElementById("container")
        //     .addEventListener("touchend", onTouchEnd, false);
        scene.add(controller);

        //

        window.addEventListener("resize", onWindowResize);

        addReticleToScene();
        createScene();
      }

      // function onSessionStarted(s) {
      //   session = s;

      //   session.requestReferenceSpace("local").then((refSpace) => {
      //     referenceSpace = refSpace;
      //     //initialReferenceSpace = xrReferenceSpace;

      //     session.requestAnimationFrame(onXRFrame);
      //   });
      // }

      // function endSession() {
      //   if (session) {
      //     session
      //       .end()
      //       .then(() => {
      //         console.log("XR session ended");
      //         // Perform any necessary cleanup here
      //         session = null;
      //         referenceSpace = null;
      //       })
      //       .catch((err) => {
      //         console.error("Failed to end XR session:", err);
      //       });
      //   }
      // }

      // function restartSession() {
      //   if (session) {
      //     endSession();
      //   }
      //   setTimeout(() => {
      //     startXRSession();
      //   }, 1000); // Adding a short delay to ensure the session has ended before starting a new one
      // }

      let hitTestSource = null;
      let localSpace = null;
      let hitTestSourceInitialized = false;

      async function initializeHitTestSource() {
        session = renderer.xr.getSession();

        // Reference spaces express relationships between an origin and the world.

        // For hit testing, we use the "viewer" reference space,
        // which is based on the device's pose at the time of the hit test.
        const viewerSpace = await session.requestReferenceSpace("viewer");

        // We're going to use the reference space of "local" for drawing things.
        // which gives us stability in terms of the environment.
        // read more here: https://developer.mozilla.org/en-US/docs/Web/API/XRReferenceSpace
        localSpace = await session.requestReferenceSpace("local");

        //define hittest source
        hitTestSource = await session.requestHitTestSource({
          space: viewerSpace,
          // offsetRay: new XRRay({ y: 0.5 }),
        });
        console.log(session);
        console.log(hitTestSource);

        // set this to true so we don't request another hit source for the rest of the session
        hitTestSourceInitialized = true;

        session.addEventListener("start", () => {
          console.log("XR session has started");
          isXRSessionStarted = true;
          //   look_for_surface_icon.style.visibility = "visible";
          // Additional actions you want to take when the session starts
        });

        // In case we close the AR session by hitting the button "End AR"
        session.addEventListener("end", () => {
          // document.getElementById("bar3").classList.remove("yellow-bar");
          // document.getElementById("bar2").classList.add("yellow-bar");

          isXRSessionStarted = false;

          // if (SandeepAudioATimeInterval != null) {
          //   clearInterval(SandeepAudioATimeInterval);
          // }
          //bgAudio.pause();
          video1.pause();
          video2.pause();
          front_scene.visible = false;
          rear_scene.visible = false;
          hitTestSourceInitialized = false;
          hitTestSource = null;
          close_ar_button.style.style.visibility = "hidden";
          console.log("XR session has ended");
        });
      }

      function addReticleToScene() {
        const geometry = new THREE.RingGeometry(0.15, 0.2, 32).rotateX(
          -Math.PI / 2
        );
        const material = new THREE.MeshBasicMaterial();

        reticle = new THREE.Mesh(geometry, material);

        // we will calculate the position and rotation of this reticle every frame manually
        // in the render() function so matrixAutoUpdate is set to false
        reticle.matrixAutoUpdate = false;
        reticle.visible = false; // we start with the reticle not visible
        scene.add(reticle);

        // optional axis helper you can add to an object
        //reticle.add(new THREE.AxesHelper(1));

        const dateTexture = new THREE.TextureLoader().load(
          "./assets/images/pointer.png"
        );
        const dateGeometry = new THREE.PlaneGeometry(0.5, 0.5);
        const dateMaterial = new THREE.MeshBasicMaterial({
          map: dateTexture,
          transparent: true,
          side: THREE.DoubleSide,
        });
        dateMesh = new THREE.Mesh(dateGeometry, dateMaterial);
        dateMesh.rotation.x = (0 * Math.PI) / 180;
        // dateMesh.rotation.y = (0 * Math.PI) / 180;
        dateMesh.position.set(0, 0.25, 0);
        reticle.add(dateMesh);
      }

      function createScene() {
        //load murder_scene
        // const loader = new GLTFLoader();

        sceneGroup = new THREE.Group();
        front_scene = new THREE.Group();
        rear_scene = new THREE.Group();

        // loader.load("../assets/models/murder_scene_final_2.glb", (gltf) => {
        //   murder_scene.add(gltf.scene);
        //   scene.add(murder_scene);
        //   murder_scene.visible = false;
        //   murder_scene.position.set(0, -0.5, -2);
        // });

        //   golamTitleObject = gltf.scene;
        //   asp_group.add(golamTitleObject);
        // });

        // loader.load("../assets/models/7 june_2.glb", (gltf) => {
        //   dateObject = gltf.scene;
        //   asp_group.add(dateObject);
        // });

        // loader.load("../assets/models/asp_scene.glb", (gltf) => {
        //   murder_scene.add(gltf.scene);
        //   scene.add(murder_scene);
        //   murder_scene.visible = false;
        //   murder_scene.position.set(0, -0.5, -2);
        // });

        // create plane for frontFrame
        const videoTexture1 = new THREE.VideoTexture(video1);
        const geometry1 = new THREE.PlaneGeometry(2, 2);
        let chromakeyMaterial1 = new THREE.ShaderMaterial({
          transparent: true,
          uniforms: {
            map: { value: videoTexture1 },
            keyColor: { value: [0.0, 1.0, 0.0] },
            similarity: { value: 0.74 }, //0.74
            smoothness: { value: 0.0 },
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
        });
        chromakeyMaterial1.side = THREE.DoubleSide; //show both sides of the material
        chromakeyMaterial1.transparent = true;

        frontFrame = new THREE.Mesh(geometry1, chromakeyMaterial1);

        frontFrame.position.set(0, 0.75, 0);

        const geometry1Shadow = new THREE.PlaneGeometry(2, 2);
        let chromakeyMaterial1Shadow = new THREE.ShaderMaterial({
          transparent: true,
          uniforms: {
            map: { value: videoTexture1 },
            keyColor: { value: [0.0, 1.0, 0.0] },
            similarity: { value: 0.74 }, //0.74
            smoothness: { value: 0.0 },
          },
          vertexShader: vertexShaderShadow,
          fragmentShader: fragmentShaderShadow,
        });
        chromakeyMaterial1Shadow.side = THREE.DoubleSide; //show both sides of the material
        chromakeyMaterial1Shadow.transparent = true;

        frontFrameShadow = new THREE.Mesh(
          geometry1Shadow,
          chromakeyMaterial1Shadow
        );
        frontFrameShadow.position.set(0, -0.2, -0.9);
        frontFrameShadow.rotation.x = (-90 * Math.PI) / 180;

        front_scene.add(frontFrameShadow);

        front_scene.add(frontFrame);
        front_scene.visible = false;
        scene.add(front_scene);

        //rearFrame
        const videoTexture2 = new THREE.VideoTexture(video2);
        const geometry2 = new THREE.PlaneGeometry(2, 2);
        let chromakeyMaterial2 = new THREE.ShaderMaterial({
          transparent: true,
          uniforms: {
            map: { value: videoTexture2 },
            keyColor: { value: [0.0, 1.0, 0.0] },
            similarity: { value: 0.74 }, //0.74
            smoothness: { value: 0.0 },
          },
          vertexShader: vertexShader,
          fragmentShader: fragmentShader,
        });
        chromakeyMaterial2.side = THREE.DoubleSide; //show both sides of the material
        chromakeyMaterial2.transparent = true;

        rearFrame = new THREE.Mesh(geometry2, chromakeyMaterial2);

        rearFrame.position.set(0, 0.75, 0);

        const geometry2Shadow = new THREE.PlaneGeometry(2, 2);
        let chromakeyMaterial2Shadow = new THREE.ShaderMaterial({
          transparent: true,
          uniforms: {
            map: { value: videoTexture2 },
            keyColor: { value: [0.0, 1.0, 0.0] },
            similarity: { value: 0.74 }, //0.74
            smoothness: { value: 0.0 },
          },
          vertexShader: vertexShaderShadow,
          fragmentShader: fragmentShaderShadow,
        });
        chromakeyMaterial2Shadow.side = THREE.DoubleSide; //show both sides of the material
        chromakeyMaterial2Shadow.transparent = true;

        rearFrameShadow = new THREE.Mesh(
          geometry2Shadow,
          chromakeyMaterial2Shadow
        );
        rearFrameShadow.position.set(0, -0.2, -0.9);
        rearFrameShadow.rotation.x = (-90 * Math.PI) / 180;

        rear_scene.add(rearFrameShadow);

        rear_scene.add(rearFrame);
        rear_scene.visible = false;
        scene.add(rear_scene);
      }

      function checkIfReticleIsHorizontal() {
        let isHorizontal = null;
        if (reticle != null && reticle.parent == scene) {
          // Get rotation matrix from the reticle
          let rotationMatrix = new THREE.Matrix4().extractRotation(
            reticle.matrix
          );

          // Extract rotation angles from the rotation matrix
          let euler = new THREE.Euler().setFromRotationMatrix(rotationMatrix);

          // Check if the reticle is horizontal (within a certain tolerance)
          isHorizontal = Math.abs(euler.x) < Math.PI / 180; // Adjust the tolerance as needed
          console.log(isHorizontal);
          return isHorizontal;
        }
        console.log(isHorizontal);
      }

      function onSelect() {
        if (
          hitSomething &&
          front_scene.visible == false &&
          front_scene != null &&
          front_scene.parent == scene &&
          rear_scene != null &&
          rear_scene.parent == scene
        ) {
          if (checkIfReticleIsHorizontal()) {
            front_scene.position.setFromMatrixPosition(reticle.matrix);
            front_scene.quaternion.setFromRotationMatrix(reticle.matrix);
            //asp_group.position.setFromMatrixPosition(reticle.matrix);
            rear_scene.position.set(
              camera.position.x,
              front_scene.position.y,
              camera.position.z + 3
            );
            rear_scene.rotation.y = (180 * Math.PI) / 180;
            front_scene.visible = true;
            rear_scene.visible = true;
            // bgAudio.play();
            video1.play();
            // setInterval(() => {
            //   video2.play();
            // }, 500);
            reticle.visible = false;
            is_front_scene_placed = true;

            // if (SandeepAudioATimeInterval == null) {
            //   SandeepAudioATimeInterval = setInterval(function () {
            //     console.log(SandeepAudioA);
            //     SandeepAudioA.play().catch((error) => {
            //       console.error("Error playing audio:", error);
            //     });
            //   }, 750);
            // }

            //console.log(SandeepAudioATimeInterval);
          }
        } else {
          console.log("assets not loaded !");
          //console.log(SandeepAudioATimeInterval);
        }

        // session = renderer.xr.getSession();
        // if (murder_scene != null && murder_scene.parent == scene && asp_group != null && asp_group.parent == scene) {
        //     session.requestReferenceSpace("viewer").then(
        //         (referenceSpace) => {
        //             murder_scene.visible = true;
        //             asp_group.visible = true;
        //             video1.play();
        //         }
        //     );

        // } else {
        //     console.log("assets not loaded !");
        // }
      }

      function furstrumCheck() {
        // if (
        //   asp_group.visible &&
        //   SandeepAudioATimeInterval != null &&
        //   objectInFrustum(imageFrame1)
        // ) {
        //   clearInterval(SandeepAudioATimeInterval);
        // }
      }

      function look_for_surface_icon_visibility() {
        console.log(
          isXRSessionStarted + " " + hitSomething + " " + front_scene.visible
        );
        if (
          localSpace != null &&
          !hitSomething &&
          front_scene.visible == false
        ) {
          close_ar_button.style.visibility = "visible";
          look_for_surface_icon.style.visibility = "visible";
          // document.getElementById("bar2").classList.remove("yellow-bar");
          // document.getElementById("bar3").classList.add("yellow-bar");
        } else {
          look_for_surface_icon.style.visibility = "hidden";
        }
      }

      function onWindowResize() {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();

        renderer.setSize(window.innerWidth, window.innerHeight);
      }

      // function getDistance(x1, y1, x2, y2) {
      //     let y = x2 - x1;
      //     let x = y2 - y1;

      //     return Math.sqrt(x * x + y * y);
      // }

      // function rotateImagePlaneToFaceCamera() {
      //     if (imageFrame != null) {
      //         imageFrame.lookAt(camera.position);
      //         imageFrame.rotation.x = 0;
      //         imageFrame.rotation.z = 0;
      //     }
      // }
      // var imageFrameCurrentScale = null;
      // function onTouchStart(event) {
      //     // Preventing default touch behavior to avoid scrolling
      //     // event.stopPropagation();
      //     // event.preventDefault();

      //     if (event.touches.length === 2) {
      //         if (imageFrame != null) {
      //             imageFrameCurrentScale = imageFrame.scale.x;
      //         }

      //         clearTimeout(singleTouchTimeout);
      //         var dx1 = event.touches[0].clientX / window.innerWidth;
      //         var dy1 = event.touches[0].clientY / window.innerHeight;

      //         var dx2 = event.touches[1].clientX / window.innerWidth;
      //         var dy2 = event.touches[1].clientY / window.innerHeight;

      //         startingDistance = getDistance(dx1, dy1, dx2, dy2);

      //         multiTouch = true;
      //     } else if (event.touches.length === 1) {
      //         singleTouchTimeout = setTimeout(() => {
      //             onSelect();
      //             multiTouch = false;
      //         }, 250);
      //         touchStartPosX = event.touches[0].clientX / window.innerWidth;
      //         touchStartPosY = event.touches[0].clientY / window.innerHeight;
      //         //onSelect();
      //     }

      // if (event.touches.length === 1) {
      //     reticle.visible = true;
      //     touchStartPosX = event.touches[0].clientX / window.innerWidth;
      //     touchStartPosY = event.touches[0].clientY / window.innerHeight;
      //     //onSelect();
      // } else if (event.touches.length === 2) {
      //     var dx1 = event.touches[0].clientX / window.innerWidth;
      //     var dy1 = event.touches[0].clientY / window.innerHeight;

      //     var dx2 = event.touches[1].clientX / window.innerWidth;
      //     var dy2 = event.touches[1].clientY / window.innerHeight;

      //     startingDistance = getDistance(dx1, dy1, dx2, dy2);
      // }
      //}

      // let newIndex = 0;

      // function onTouchMove(event) {
      //     // event.stopPropagation();
      //     if (event.touches.length === 2) {
      //         clearTimeout(singleTouchTimeout);
      //         //console.log("double touch");

      //         var dx1 = event.touches[0].clientX / window.innerWidth;
      //         var dy1 = event.touches[0].clientY / window.innerHeight;

      //         var dx2 = event.touches[1].clientX / window.innerWidth;
      //         var dy2 = event.touches[1].clientY / window.innerHeight;

      //         let dist = getDistance(dx1, dy1, dx2, dy2);
      //         distRatio = dist / startingDistance;

      //         if (imageFrame != null && imageFrame.parent == scene) {

      //             if (distRatio > 1) {
      //                 //console.log(imageFrame);

      //                 if (imageFrameCurrentScale * distRatio <= 2) {
      //                     imageFrame.scale.set(imageFrameCurrentScale * distRatio, imageFrameCurrentScale * distRatio, imageFrameCurrentScale * distRatio);

      //                     // Adjust position to maintain bottom position
      //                     // imageFrame.position.set(
      //                     //     imageFrameCurrentPosition.x,
      //                     //     originalBottomY + imageFrame.scale.y / 2,
      //                     //     imageFrameCurrentPosition.z
      //                     // );
      //                 } else {
      //                     //imageFrameCurrentPosition = imageFrame.position;
      //                     imageFrame.scale.set(2, 2, 2);
      //                 }
      //             } else if (distRatio < 1) {
      //                 if (imageFrame.scale.x * distRatio >= 0.5) {
      //                     ////console.log(imageFrame);
      //                     //imageFrameCurrentPosition = imageFrame.position;
      //                     imageFrame.scale.set(imageFrameCurrentScale * distRatio, imageFrameCurrentScale * distRatio, imageFrameCurrentScale * distRatio);

      //                     // Adjust position to maintain bottom position
      //                     // imageFrame.position.set(
      //                     //     imageFrameCurrentPosition.x,
      //                     //     originalBottomY + imageFrame.scale.y / 2,
      //                     //     imageFrameCurrentPosition.z
      //                     // );
      //                 } else {
      //                     //imageFrameCurrentPosition = imageFrame.position;
      //                     imageFrame.scale.set(0.5, 0.5, 0.5);
      //                 }
      //             }
      //         }
      //     } else if (event.touches.length === 1) {
      //         //event.preventDefault();
      //         // Updating texture index based on touch movement
      //         const touch = event.touches[0];
      //         const x = touch.clientX / window.innerWidth;
      //         const y = touch.clientY / window.innerHeight;

      //         let deltaX = x - touchStartPosX; //distance travelled in x direction
      //         let deltaY = y - touchStartPosY; //distance travelled in y direction

      //         ////console.log(deltaY);

      //         if (sceneGroup != null) {
      //             sceneGroup.translateZ((deltaY / 40));
      //             sceneGroup.translateX((deltaX / 30));
      //         }
      //         // imageFrame.position.set(imageFrame.position.x-(-1*(deltaX/100)), imageFrame.position.y, imageFrame.position.z-(-1*(deltaY/10)));
      //     }
      // }

      // function onTouchEnd(event) {
      //     // event.stopPropagation();
      //     // event.preventDefault();
      //     clearTimeout(singleTouchTimeout);
      //     if (!multiTouch && event.touches.length === 1) {
      //         // onSelect();
      //         multiTouch = false;
      //     }
      // }

      // function logRotation() {
      //     if (imageFrame != null) {
      //         console.log(imageFrame.rotation.x);
      //     }
      // }

      // Create a Frustum object
      frustum = new THREE.Frustum();
      var cameraViewProjectionMatrix = new THREE.Matrix4();

      function updateFrustum() {
        camera.updateMatrixWorld(); // Make sure the camera matrix is updated
        // camera.matrixWorldInverse.getInverse(
        //   camera.matrixWorld
        // );
        cameraViewProjectionMatrix.multiplyMatrices(
          camera.projectionMatrix,
          camera.matrixWorldInverse
        );
        frustum.setFromProjectionMatrix(cameraViewProjectionMatrix);
      }
      function objectInFrustum(object) {
        // Update the frustum with the camera's current view
        updateFrustum();

        // Assuming object has a bounding volume (boundingBox or boundingSphere)
        if (
          object.geometry.boundingBox !== null ||
          object.geometry.boundingSphere !== null
        ) {
          // Test for intersection with object's bounding volume
          return frustum.intersectsObject(object);
        } else {
          // If no bounding volume, return true (assume it's in frustum)
          return true;
        }
      }
      // function pointerVisibility() {
      //     if (pointer != null && sceneGroup != null && sceneGroup.parent == scene) {
      //         if (objectInFrustum(imageFrame1)) {
      //             pointer.visible = false;
      //         } else {
      //             pointer.visible = true;

      //         }
      //         // if (imageFrame.parent != scene) {
      //         //     pointer.visible = false;
      //         // }
      //     } else {
      //         if (pointer != null)
      //             pointer.visible = false;
      //     }
      // }
      // function positionPointer() {
      //     if (pointer != null) {
      //         pointer.position.copy(camera.position);
      //         pointer.rotation.copy(camera.rotation);
      //         pointer.translateZ(-1.5);
      //         if (sceneGroup != null) {
      //             pointer.lookAt(sceneGroup.position);
      //             pointer.rotateX(-Math.PI);
      //             pointer.rotateZ(-Math.PI / 2);
      //         }
      //         pointer.updateMatrix();
      //         //pointer.visible = true;
      //     }
      // }

      //

      function animate() {
        renderer.setAnimationLoop(render);
      }

      function render(timestamp, frame) {
        furstrumCheck();
        look_for_surface_icon_visibility();
        // pointerVisibility();
        // positionPointer();

        if (frame) {
          // 1. create a hit test source once and keep it for all the frames
          // this gets called only once
          if (!hitTestSourceInitialized) {
            initializeHitTestSource();
          }

          // 2. get hit test results
          if (hitTestSourceInitialized && !is_front_scene_placed) {
            // we get the hit test results for a particular frame
            const hitTestResults = frame.getHitTestResults(hitTestSource);

            // XRHitTestResults The hit test may find multiple surfaces. The first one in the array is the one closest to the camera.
            if (hitTestResults.length > 0) {
              hitSomething = true;
              const hit = hitTestResults[0];
              // Get a pose from the hit test result. The pose represents the pose of a point on a surface.
              const pose = hit.getPose(localSpace);

              reticle.visible = true;
              // Transform/move the reticle image to the hit test position
              reticle.matrix.fromArray(pose.transform.matrix);
              front_scene.matrix.fromArray(pose.transform.matrix);
              // if (!automaticallyPlaced) {
              //     onSelect();
              //     automaticallyPlaced = true;
              //     showSurfaceMessage = false;
              // }
            } else {
              reticle.visible = false;
              hitSomething = false;
            }
          }
        }
        //console.log(hitSomething);
        renderer.render(scene, camera);
      }
    </script>
  </body>
</html>
